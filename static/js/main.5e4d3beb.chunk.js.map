{"version":3,"sources":["components/styled/typography.tsx","components/styled/buttons.tsx","components/data-display/CountryTableRow.tsx","components/data-display/CountryTable.tsx","utilities/EndpointUtility.ts","pages/CountriesPage.tsx","pages/CountryPage.tsx","App.tsx","index.tsx"],"names":["StyledH1","styled","props","Typography","variant","fontWeight","fontSize","StyledH3","marginTop","StyledButton","Button","height","width","StyledGridRow","Grid","item","marginBottom","StyledCard","Card","padding","theme","spacing","cursor","borderColor","transform","transition","CountryTableRow","onClick","handleClick","data","name","CountryTable","countries","onRowClick","React","useState","page","setPage","useEffect","handleRowClick","countryName","pageGroups","length","i","group","Math","ceil","toString","push","pageCount","Object","keys","showCountries","showLastButton","showNextButton","Fragment","container","direction","map","row","xs","EndpointUtility","searchTerm","endpoint","this","baseUrl","axios","get","response","CountriesPage","setCountries","setActiveCountry","setSearchTerm","isLoading","setIsLoading","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","history","useHistory","handleSearchClicked","e","a","preventDefault","fetchByPartialName","catch","finally","Array","isArray","sorted","sort","b","localeCompare","Container","maxWidth","onSubmit","TextField","disabled","fullWidth","placeholder","value","onChange","target","disableElevation","type","CircularProgress","Snackbar","open","autoHideDuration","onClose","message","CountryPage","navigateHome","countryData","filter","country","activeCountry","textAlign","alt","src","flag","style","boxShadow","borderRadius","population","demonym","App","state","setState","path","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e4d3beb.chunk.js","sourcesContent":["import { styled } from '@mui/system';\nimport { Typography } from '@mui/material';\n\nexport const StyledH1 = styled((props) => (\n\t<Typography variant='h1' {...props} />\n))({\n\tfontWeight: 500,\n\tfontSize: '5rem',\n});\n\nexport const StyledH3 = styled((props) => (\n\t<Typography variant='h3' {...props} />\n))({\n\tfontWeight: 500,\n\tfontSize: '3rem',\n\tmarginTop: '1rem',\n});\n","import { styled } from '@mui/system';\nimport { Button, ButtonProps } from '@mui/material';\n\nexport const StyledButton = styled((props: ButtonProps) => (\n\t<Button {...props} />\n))({\n\theight: '100%',\n\twidth: '100%',\n});\n","import { Card, CardProps, Grid } from '@mui/material';\nimport { GridProps, styled } from '@mui/system';\nimport { ResponseCountry } from '../../interfaces/rest-countries';\n\nconst StyledGridRow = styled((props: GridProps) => <Grid item {...props} />)({\n\tmarginBottom: '0.2rem',\n});\n\nconst StyledCard = styled((props: CardProps) => (\n\t<Card variant='outlined' {...props} />\n))(({ theme }) => ({\n\tpadding: theme.spacing(2),\n\tcursor: 'pointer',\n\t'&:hover': {\n\t\tborderColor: '#448aff',\n\t\ttransform: 'scale(1.01)',\n\t\ttransition: '.1s ease-in-out',\n\t},\n}));\n\ninterface ICountryTableRow {\n\tdata: ResponseCountry;\n\thandleClick(name: string): any;\n}\n\nexport const CountryTableRow = (props: ICountryTableRow) => {\n\t// Handle row click\n\tconst handleClick = () => {\n\t\tif (props.handleClick) {\n\t\t\tprops.handleClick(props.data.name);\n\t\t}\n\t};\n\n\treturn (\n\t\t<StyledGridRow>\n\t\t\t<StyledCard onClick={handleClick}>{props.data.name}</StyledCard>\n\t\t</StyledGridRow>\n\t);\n};\n","import { Grid, Typography } from '@mui/material';\nimport React from 'react';\nimport { ResponseCountry } from '../../interfaces/rest-countries';\nimport { CountryTableRow } from './CountryTableRow';\nimport { StyledButton } from '../styled/buttons';\n\nexport interface CountryTableProps {\n\tcountries: ResponseCountry[];\n\tonRowClick(countryName: string): any;\n}\n\nexport const CountryTable = ({ countries, onRowClick }: CountryTableProps) => {\n\t// Page\n\tconst [page, setPage] = React.useState(1);\n\n\t// Reset page when countries change\n\tReact.useEffect(() => {\n\t\tsetPage(1);\n\t}, [countries]);\n\n\tconst handleRowClick = (countryName: string) => {\n\t\tonRowClick(countryName);\n\t};\n\n\t// Create pagination groups\n\tconst pageGroups: { [group: string]: ResponseCountry[] } = {};\n\tif (countries.length) {\n\t\tfor (let i = 0; i <= countries.length - 1; i++) {\n\t\t\tconst group = Math.ceil((i + 1) / 10);\n\n\t\t\tif (!pageGroups[group]) {\n\t\t\t\tpageGroups[group] = [];\n\t\t\t}\n\n\t\t\tpageGroups[group.toString()].push(countries[i]);\n\t\t}\n\t}\n\n\t// Conditional rendering booleans\n\tconst pageCount = Object.keys(pageGroups).length;\n\tconst showCountries = pageCount ? pageGroups[page] : [];\n\tconst showLastButton = page !== 1 && countries.length;\n\tconst showNextButton = page !== pageCount && countries.length;\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<br />\n\t\t\t<Grid container direction='column'>\n\t\t\t\t{showCountries.map((row) => (\n\t\t\t\t\t<CountryTableRow\n\t\t\t\t\t\tkey={row.name}\n\t\t\t\t\t\tdata={row}\n\t\t\t\t\t\thandleClick={handleRowClick}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</Grid>\n\t\t\t<br />\n\n\t\t\t{pageCount ? (\n\t\t\t\t<Typography variant='overline'>{`Page: ${page}/${pageCount}`}</Typography>\n\t\t\t) : null}\n\n\t\t\t{/* PAGINATION */}\n\t\t\t<Grid container spacing={2}>\n\t\t\t\t{/* LAST BUTTON */}\n\t\t\t\t{showLastButton ? (\n\t\t\t\t\t<Grid item xs={showNextButton ? 6 : 12}>\n\t\t\t\t\t\t<StyledButton\n\t\t\t\t\t\t\tonClick={() => setPage(page - 1)}\n\t\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tLast\n\t\t\t\t\t\t</StyledButton>\n\t\t\t\t\t</Grid>\n\t\t\t\t) : null}\n\n\t\t\t\t{/* NEXT BUTTON */}\n\t\t\t\t{showNextButton ? (\n\t\t\t\t\t<Grid item xs={showLastButton ? 6 : 12}>\n\t\t\t\t\t\t<StyledButton\n\t\t\t\t\t\t\tonClick={() => setPage(page + 1)}\n\t\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tNext\n\t\t\t\t\t\t</StyledButton>\n\t\t\t\t\t</Grid>\n\t\t\t\t) : null}\n\t\t\t</Grid>\n\t\t</React.Fragment>\n\t);\n};\n","import axios from 'axios';\nimport { ResponseCountry } from '../interfaces/rest-countries';\n\nexport class EndpointUtility {\n\tstatic baseUrl = 'https://restcountries.com/v2/name';\n\n\tstatic async fetchByPartialName(\n\t\tsearchTerm: string\n\t): Promise<ResponseCountry[]> {\n\t\t// v3 404's for search of \"aus\" - using v2 instead\n\t\tconst endpoint = `${this.baseUrl}/${searchTerm}`;\n\t\tconst response = await axios.get<ResponseCountry[]>(endpoint);\n\n\t\treturn response.data;\n\t}\n}\n","import React from 'react';\nimport {\n\tCircularProgress,\n\tContainer,\n\tGrid,\n\tSnackbar,\n\tTextField,\n\tTypography,\n} from '@mui/material';\nimport { StyledH1 } from '../components/styled/typography';\nimport { StyledButton } from '../components/styled/buttons';\nimport { CountryTable } from '../components/data-display/CountryTable';\nimport { EndpointUtility } from '../utilities/EndpointUtility';\nimport { ResponseCountry } from '../interfaces/rest-countries';\nimport { useHistory } from 'react-router';\n\ninterface ICountriesPage {\n\tsetCountries(countries: ResponseCountry[]): any;\n\tsetActiveCountry(country: string): any;\n\tcountries: ResponseCountry[];\n}\n\nexport const CountriesPage = ({\n\tsetCountries,\n\tsetActiveCountry,\n\tcountries,\n}: ICountriesPage & JSX.IntrinsicAttributes) => {\n\t// Search\n\tconst [searchTerm, setSearchTerm] = React.useState('');\n\tconst [isLoading, setIsLoading] = React.useState(false);\n\n\t// Snackbar\n\tconst [snackbarOpen, setSnackbarOpen] = React.useState(false);\n\tconst [snackbarMessage, setSnackbarMessage] = React.useState('');\n\n\t// Routing\n\tconst history = useHistory();\n\n\t// Handlers\n\tconst handleCloseSnackbar = () => setSnackbarOpen(false);\n\n\tconst handleSearchChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\tsetSearchTerm(e.target.value);\n\t};\n\n\tconst handleSearchClicked = async (e: React.FormEvent<HTMLElement>) => {\n\t\te.preventDefault();\n\n\t\t// Check input is provided\n\t\tif (!searchTerm.length) {\n\t\t\tsetSnackbarMessage('✏️ Please enter a search word.');\n\t\t\tsetSnackbarOpen(true);\n\t\t\treturn;\n\t\t}\n\n\t\t// Set country state to empty\n\t\tsetCountries([]);\n\n\t\t// Disable components and show spinner\n\t\tsetIsLoading(true);\n\n\t\tconst response = await EndpointUtility.fetchByPartialName(searchTerm)\n\t\t\t.catch((e) => {\n\t\t\t\t// Notify user\n\t\t\t\tsetSnackbarMessage('🚨 Something went wrong, try again soon.');\n\t\t\t\tsetSnackbarOpen(true);\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\t// Enable components and show spinner\n\t\t\t\tsetIsLoading(false);\n\t\t\t});\n\n\t\tif (Array.isArray(response)) {\n\t\t\t// sort response\n\t\t\tconst sorted = response.sort((a, b) =>\n\t\t\t\ta.name.localeCompare(b.name)\n\t\t\t);\n\t\t\tsetCountries(sorted);\n\t\t}\n\t};\n\n\tconst handleRowClick = (countryName: string) => {\n\t\tsetActiveCountry(countryName);\n\t\thistory.push('/country');\n\t};\n\n\treturn (\n\t\t<main>\n\t\t\t<Container maxWidth='sm'>\n\t\t\t\t<StyledH1>Countries</StyledH1>\n\t\t\t\t<form onSubmit={handleSearchClicked}>\n\t\t\t\t\t<Grid container spacing={2}>\n\t\t\t\t\t\t<Grid item xs={8}>\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tdisabled={isLoading}\n\t\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\t\t\tplaceholder='Country Name'\n\t\t\t\t\t\t\t\tvalue={searchTerm}\n\t\t\t\t\t\t\t\tonChange={handleSearchChanged}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t<Grid item xs={4}>\n\t\t\t\t\t\t\t<StyledButton\n\t\t\t\t\t\t\t\tdisabled={isLoading}\n\t\t\t\t\t\t\t\tvariant='contained'\n\t\t\t\t\t\t\t\tdisableElevation\n\t\t\t\t\t\t\t\ttype='submit'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{isLoading ? (\n\t\t\t\t\t\t\t\t\t<CircularProgress />\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<Typography>Search</Typography>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</StyledButton>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\t\t\t\t</form>\n\n\t\t\t\t<CountryTable\n\t\t\t\t\tcountries={countries}\n\t\t\t\t\tonRowClick={handleRowClick}\n\t\t\t\t/>\n\t\t\t</Container>\n\n\t\t\t{/* User feedback */}\n\t\t\t<Snackbar\n\t\t\t\topen={snackbarOpen}\n\t\t\t\tautoHideDuration={4000}\n\t\t\t\tonClose={handleCloseSnackbar}\n\t\t\t\tmessage={snackbarMessage}\n\t\t\t/>\n\t\t</main>\n\t);\n};\n","import { ResponseCountry } from '../interfaces/rest-countries';\nimport { Button, Container, Grid, Typography } from '@mui/material';\nimport { useHistory } from 'react-router';\nimport { StyledH3 } from '../components/styled/typography';\n\ninterface ICountryPage {\n\tcountries: ResponseCountry[];\n\tactiveCountry: string;\n}\n\nexport const CountryPage = (props: ICountryPage & JSX.IntrinsicAttributes) => {\n\t// Routing\n\tconst history = useHistory();\n\tconst navigateHome = () => {\n\t\treturn history.push('/');\n\t};\n\n\t// Go to search page if fetch hasnt been called\n\tif (!props.countries.length) {\n\t\tnavigateHome();\n\t\treturn null;\n\t}\n\n\t// Get detailed country data\n\tconst countryData = props.countries.filter(\n\t\t(country) => country.name === props.activeCountry\n\t)[0];\n\n\treturn (\n\t\t<main>\n\t\t\t<Container maxWidth='sm'>\n\t\t\t\t<Grid direction='column' textAlign='center'>\n\t\t\t\t\t<br />\n\t\t\t\t\t<Button fullWidth onClick={navigateHome} variant='outlined'>\n\t\t\t\t\t\tBack\n\t\t\t\t\t</Button>\n\n\t\t\t\t\t<StyledH3>{props.activeCountry}</StyledH3>\n\t\t\t\t\t<img\n\t\t\t\t\t\twidth='200px'\n\t\t\t\t\t\talt='country-flag'\n\t\t\t\t\t\tsrc={countryData.flag}\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t// Some shadow for flags with white edges like algeria\n\t\t\t\t\t\t\tboxShadow: '0px 0px 3px',\n\t\t\t\t\t\t\tborderRadius: '4px',\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<Grid container spacing={2}>\n\t\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t\t<Typography>\n\t\t\t\t\t\t\t\t<strong>Population</strong>\n\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t\t<Typography>{countryData.population}</Typography>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\n\t\t\t\t\t<br />\n\n\t\t\t\t\t<Grid container spacing={2}>\n\t\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t\t<Typography>\n\t\t\t\t\t\t\t\t<strong>Demonym</strong>\n\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t\t<Typography>{countryData.demonym}</Typography>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</Container>\n\t\t</main>\n\t);\n};\n","import { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\n// Pages\nimport { CountriesPage } from './pages/CountriesPage';\nimport { CountryPage } from './pages/CountryPage';\n\n// Interfaces\nimport { ResponseCountry } from './interfaces/rest-countries';\n\ninterface AppProps {}\n\ninterface AppState {\n\tcountries: ResponseCountry[];\n\tactiveCountry: string;\n}\n\nclass App extends Component<AppProps, AppState> {\n\tstate = {\n\t\tcountries: [],\n\t\tactiveCountry: '',\n\t};\n\n\tsetCountries = (countries: ResponseCountry[]) => {\n\t\tthis.setState({ countries });\n\t};\n\n\tsetActiveCountry = (countryName: string) => {\n\t\tthis.setState({ activeCountry: countryName });\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<Router>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path='/country'>\n\t\t\t\t\t\t<CountryPage\n\t\t\t\t\t\t\tcountries={this.state.countries}\n\t\t\t\t\t\t\tactiveCountry={this.state.activeCountry}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path='/'>\n\t\t\t\t\t\t<CountriesPage\n\t\t\t\t\t\t\tsetCountries={this.setCountries}\n\t\t\t\t\t\t\tsetActiveCountry={this.setActiveCountry}\n\t\t\t\t\t\t\tcountries={this.state.countries}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Route>\n\t\t\t\t</Switch>\n\t\t\t</Router>\n\t\t);\n\t}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}